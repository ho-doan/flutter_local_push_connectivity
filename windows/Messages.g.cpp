// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "Messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_local_push_connectivity {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// LocalPushConnectivityModel

LocalPushConnectivityModel::LocalPushConnectivityModel(
  const NetworkType& network_type,
  const ConnectType& connect_type)
 : network_type_(network_type),
    connect_type_(connect_type) {}

LocalPushConnectivityModel::LocalPushConnectivityModel(
  const NetworkType& network_type,
  const ConnectType& connect_type,
  const std::string* host,
  const int64_t* port,
  const std::string* ssid)
 : network_type_(network_type),
    connect_type_(connect_type),
    host_(host ? std::optional<std::string>(*host) : std::nullopt),
    port_(port ? std::optional<int64_t>(*port) : std::nullopt),
    ssid_(ssid ? std::optional<std::string>(*ssid) : std::nullopt) {}

const NetworkType& LocalPushConnectivityModel::network_type() const {
  return network_type_;
}

void LocalPushConnectivityModel::set_network_type(const NetworkType& value_arg) {
  network_type_ = value_arg;
}


const ConnectType& LocalPushConnectivityModel::connect_type() const {
  return connect_type_;
}

void LocalPushConnectivityModel::set_connect_type(const ConnectType& value_arg) {
  connect_type_ = value_arg;
}


const std::string* LocalPushConnectivityModel::host() const {
  return host_ ? &(*host_) : nullptr;
}

void LocalPushConnectivityModel::set_host(const std::string_view* value_arg) {
  host_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void LocalPushConnectivityModel::set_host(std::string_view value_arg) {
  host_ = value_arg;
}


const int64_t* LocalPushConnectivityModel::port() const {
  return port_ ? &(*port_) : nullptr;
}

void LocalPushConnectivityModel::set_port(const int64_t* value_arg) {
  port_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void LocalPushConnectivityModel::set_port(int64_t value_arg) {
  port_ = value_arg;
}


const std::string* LocalPushConnectivityModel::ssid() const {
  return ssid_ ? &(*ssid_) : nullptr;
}

void LocalPushConnectivityModel::set_ssid(const std::string_view* value_arg) {
  ssid_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void LocalPushConnectivityModel::set_ssid(std::string_view value_arg) {
  ssid_ = value_arg;
}


EncodableList LocalPushConnectivityModel::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(CustomEncodableValue(network_type_));
  list.push_back(CustomEncodableValue(connect_type_));
  list.push_back(host_ ? EncodableValue(*host_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  list.push_back(ssid_ ? EncodableValue(*ssid_) : EncodableValue());
  return list;
}

LocalPushConnectivityModel LocalPushConnectivityModel::FromEncodableList(const EncodableList& list) {
  LocalPushConnectivityModel decoded(
    std::any_cast<const NetworkType&>(std::get<CustomEncodableValue>(list[0])),
    std::any_cast<const ConnectType&>(std::get<CustomEncodableValue>(list[1])));
  auto& encodable_host = list[2];
  if (!encodable_host.IsNull()) {
    decoded.set_host(std::get<std::string>(encodable_host));
  }
  auto& encodable_port = list[3];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<int64_t>(encodable_port));
  }
  auto& encodable_ssid = list[4];
  if (!encodable_ssid.IsNull()) {
    decoded.set_ssid(std::get<std::string>(encodable_ssid));
  }
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<NetworkType>(enum_arg_value));
      }
    case 130: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<ConnectType>(enum_arg_value));
      }
    case 131: {
        return CustomEncodableValue(LocalPushConnectivityModel::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(NetworkType)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<NetworkType>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(ConnectType)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<ConnectType>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(LocalPushConnectivityModel)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<LocalPushConnectivityModel>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by LocalPushConnectivityHostApi.
const flutter::StandardMessageCodec& LocalPushConnectivityHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `LocalPushConnectivityHostApi` to handle messages through the `binary_messenger`.
void LocalPushConnectivityHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  LocalPushConnectivityHostApi* api) {
  LocalPushConnectivityHostApi::SetUp(binary_messenger, api, "");
}

void LocalPushConnectivityHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  LocalPushConnectivityHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.initialize" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_model_arg = args.at(0);
          if (encodable_model_arg.IsNull()) {
            reply(WrapError("model_arg unexpectedly null."));
            return;
          }
          const auto& model_arg = std::any_cast<const LocalPushConnectivityModel&>(std::get<CustomEncodableValue>(encodable_model_arg));
          api->Initialize(model_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.connect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_model_arg = args.at(0);
          if (encodable_model_arg.IsNull()) {
            reply(WrapError("model_arg unexpectedly null."));
            return;
          }
          const auto& model_arg = std::any_cast<const LocalPushConnectivityModel&>(std::get<CustomEncodableValue>(encodable_model_arg));
          api->Connect(model_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.disconnect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Disconnect([reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.dispose" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Dispose([reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue LocalPushConnectivityHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue LocalPushConnectivityHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace flutter_local_push_connectivity
