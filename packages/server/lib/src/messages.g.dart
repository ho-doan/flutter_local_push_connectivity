// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum ChannelType {
  notification,
  control,
}

enum UserStatus {
  online,
  away,
  busy,
  offline,
}

class UserPigeon {
  UserPigeon({
    this.deviceName,
    this.deviceId,
    this.status,
  });

  String? deviceName;

  String? deviceId;

  UserStatus? status;

  List<Object?> _toList() {
    return <Object?>[
      deviceName,
      deviceId,
      status,
    ];
  }

  Object encode() {
    return _toList();  }

  static UserPigeon decode(Object result) {
    result as List<Object?>;
    return UserPigeon(
      deviceName: result[0] as String?,
      deviceId: result[1] as String?,
      status: result[2] as UserStatus?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! UserPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class DirectoryPigeon {
  DirectoryPigeon({
    this.users,
  });

  List<UserPigeon>? users;

  List<Object?> _toList() {
    return <Object?>[
      users,
    ];
  }

  Object encode() {
    return _toList();  }

  static DirectoryPigeon decode(Object result) {
    result as List<Object?>;
    return DirectoryPigeon(
      users: (result[0] as List<Object?>?)?.cast<UserPigeon>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DirectoryPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class InvitePigeon {
  InvitePigeon({
    this.from,
    this.to,
    this.message,
  });

  UserPigeon? from;

  UserPigeon? to;

  String? message;

  List<Object?> _toList() {
    return <Object?>[
      from,
      to,
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static InvitePigeon decode(Object result) {
    result as List<Object?>;
    return InvitePigeon(
      from: result[0] as UserPigeon?,
      to: result[1] as UserPigeon?,
      message: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! InvitePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class TextMessagePigeon {
  TextMessagePigeon({
    this.from,
    this.to,
    this.message,
  });

  UserPigeon? from;

  UserPigeon? to;

  String? message;

  List<Object?> _toList() {
    return <Object?>[
      from,
      to,
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static TextMessagePigeon decode(Object result) {
    result as List<Object?>;
    return TextMessagePigeon(
      from: result[0] as UserPigeon?,
      to: result[1] as UserPigeon?,
      message: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TextMessagePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CallActionPigeon {
  CallActionPigeon({
    this.from,
    this.to,
    this.action,
  });

  UserPigeon? from;

  UserPigeon? to;

  String? action;

  List<Object?> _toList() {
    return <Object?>[
      from,
      to,
      action,
    ];
  }

  Object encode() {
    return _toList();  }

  static CallActionPigeon decode(Object result) {
    result as List<Object?>;
    return CallActionPigeon(
      from: result[0] as UserPigeon?,
      to: result[1] as UserPigeon?,
      action: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CallActionPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class StatusUpdatePigeon {
  StatusUpdatePigeon({
    this.user,
    this.status,
  });

  UserPigeon? user;

  UserStatus? status;

  List<Object?> _toList() {
    return <Object?>[
      user,
      status,
    ];
  }

  Object encode() {
    return _toList();  }

  static StatusUpdatePigeon decode(Object result) {
    result as List<Object?>;
    return StatusUpdatePigeon(
      user: result[0] as UserPigeon?,
      status: result[1] as UserStatus?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! StatusUpdatePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GroupPigeon {
  GroupPigeon({
    this.groupId,
    this.name,
    this.members,
    this.owner,
  });

  String? groupId;

  String? name;

  List<UserPigeon>? members;

  UserPigeon? owner;

  List<Object?> _toList() {
    return <Object?>[
      groupId,
      name,
      members,
      owner,
    ];
  }

  Object encode() {
    return _toList();  }

  static GroupPigeon decode(Object result) {
    result as List<Object?>;
    return GroupPigeon(
      groupId: result[0] as String?,
      name: result[1] as String?,
      members: (result[2] as List<Object?>?)?.cast<UserPigeon>(),
      owner: result[3] as UserPigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GroupPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GroupActionPigeon {
  GroupActionPigeon({
    this.action,
    this.group,
    this.user,
  });

  String? action;

  GroupPigeon? group;

  UserPigeon? user;

  List<Object?> _toList() {
    return <Object?>[
      action,
      group,
      user,
    ];
  }

  Object encode() {
    return _toList();  }

  static GroupActionPigeon decode(Object result) {
    result as List<Object?>;
    return GroupActionPigeon(
      action: result[0] as String?,
      group: result[1] as GroupPigeon?,
      user: result[2] as UserPigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GroupActionPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class SyncRequestPigeon {
  SyncRequestPigeon({
    this.type,
    this.timestamp,
    this.user,
  });

  String? type;

  int? timestamp;

  UserPigeon? user;

  List<Object?> _toList() {
    return <Object?>[
      type,
      timestamp,
      user,
    ];
  }

  Object encode() {
    return _toList();  }

  static SyncRequestPigeon decode(Object result) {
    result as List<Object?>;
    return SyncRequestPigeon(
      type: result[0] as String?,
      timestamp: result[1] as int?,
      user: result[2] as UserPigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SyncRequestPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class SyncResponsePigeon {
  SyncResponsePigeon({
    this.type,
    this.data,
    this.timestamp,
  });

  String? type;

  List<dynamic>? data;

  int? timestamp;

  List<Object?> _toList() {
    return <Object?>[
      type,
      data,
      timestamp,
    ];
  }

  Object encode() {
    return _toList();  }

  static SyncResponsePigeon decode(Object result) {
    result as List<Object?>;
    return SyncResponsePigeon(
      type: result[0] as String?,
      data: (result[1] as List<Object?>?)?.cast<dynamic>(),
      timestamp: result[2] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SyncResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ChannelType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is UserStatus) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is UserPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is DirectoryPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is InvitePigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is TextMessagePigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is CallActionPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is StatusUpdatePigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is GroupPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is GroupActionPigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is SyncRequestPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is SyncResponsePigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ChannelType.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UserStatus.values[value];
      case 131: 
        return UserPigeon.decode(readValue(buffer)!);
      case 132: 
        return DirectoryPigeon.decode(readValue(buffer)!);
      case 133: 
        return InvitePigeon.decode(readValue(buffer)!);
      case 134: 
        return TextMessagePigeon.decode(readValue(buffer)!);
      case 135: 
        return CallActionPigeon.decode(readValue(buffer)!);
      case 136: 
        return StatusUpdatePigeon.decode(readValue(buffer)!);
      case 137: 
        return GroupPigeon.decode(readValue(buffer)!);
      case 138: 
        return GroupActionPigeon.decode(readValue(buffer)!);
      case 139: 
        return SyncRequestPigeon.decode(readValue(buffer)!);
      case 140: 
        return SyncResponsePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}
