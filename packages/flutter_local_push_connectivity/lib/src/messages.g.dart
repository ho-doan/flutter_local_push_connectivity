// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum TerminatedReasonPigeon {
  hungUp,
  callFailed,
  unavailable,
}

enum CallManagerStatePigeonEnum {
  disconnected,
  connecting,
  connected,
  disconnecting,
}

enum PushConnectionState {
  configurationNeeded,
  waitingForActivePushManager,
  connecting,
  connected,
  waitingForUsers,
}

enum UserAvailabilityPigeonEnum {
  available,
  unavailable,
}

enum NetworkConfigurationMode {
  wifi,
  cellular,
  ethernet,
  both,
}

enum CallRolePigeon {
  sender,
  receiver,
}

class UserPigeon {
  UserPigeon({
    required this.uuid,
    required this.deviceName,
  });

  String uuid;

  String deviceName;

  List<Object?> _toList() {
    return <Object?>[
      uuid,
      deviceName,
    ];
  }

  Object encode() {
    return _toList();  }

  static UserPigeon decode(Object result) {
    result as List<Object?>;
    return UserPigeon(
      uuid: result[0]! as String,
      deviceName: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! UserPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class TextMessagePigeon {
  TextMessagePigeon({
    required this.sender,
    required this.receiver,
    required this.message,
  });

  UserPigeon sender;

  UserPigeon receiver;

  String message;

  List<Object?> _toList() {
    return <Object?>[
      sender,
      receiver,
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static TextMessagePigeon decode(Object result) {
    result as List<Object?>;
    return TextMessagePigeon(
      sender: result[0]! as UserPigeon,
      receiver: result[1]! as UserPigeon,
      message: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TextMessagePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class UserAvailabilityPigeon {
  UserAvailabilityPigeon({
    required this.availability,
    required this.user,
  });

  UserAvailabilityPigeonEnum availability;

  UserPigeon user;

  List<Object?> _toList() {
    return <Object?>[
      availability,
      user,
    ];
  }

  Object encode() {
    return _toList();  }

  static UserAvailabilityPigeon decode(Object result) {
    result as List<Object?>;
    return UserAvailabilityPigeon(
      availability: result[0]! as UserAvailabilityPigeonEnum,
      user: result[1]! as UserPigeon,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! UserAvailabilityPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PushManagerSettingsPigeon {
  PushManagerSettingsPigeon({
    required this.ssid,
    required this.mobileCountryCode,
    required this.mobileNetworkCode,
    required this.trackingAreaCode,
    required this.host,
    required this.matchEthernet,
  });

  String ssid;

  String mobileCountryCode;

  String mobileNetworkCode;

  String trackingAreaCode;

  String host;

  bool matchEthernet;

  List<Object?> _toList() {
    return <Object?>[
      ssid,
      mobileCountryCode,
      mobileNetworkCode,
      trackingAreaCode,
      host,
      matchEthernet,
    ];
  }

  Object encode() {
    return _toList();  }

  static PushManagerSettingsPigeon decode(Object result) {
    result as List<Object?>;
    return PushManagerSettingsPigeon(
      ssid: result[0]! as String,
      mobileCountryCode: result[1]! as String,
      mobileNetworkCode: result[2]! as String,
      trackingAreaCode: result[3]! as String,
      host: result[4]! as String,
      matchEthernet: result[5]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PushManagerSettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class SettingsPigeon {
  SettingsPigeon({
    required this.uuid,
    required this.deviceName,
    required this.pushManagerSettings,
  });

  String uuid;

  String deviceName;

  PushManagerSettingsPigeon pushManagerSettings;

  List<Object?> _toList() {
    return <Object?>[
      uuid,
      deviceName,
      pushManagerSettings,
    ];
  }

  Object encode() {
    return _toList();  }

  static SettingsPigeon decode(Object result) {
    result as List<Object?>;
    return SettingsPigeon(
      uuid: result[0]! as String,
      deviceName: result[1]! as String,
      pushManagerSettings: result[2]! as PushManagerSettingsPigeon,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CallManagerStatePigeon {
  CallManagerStatePigeon({
    required this.state,
    this.user,
    this.terminatedReason,
  });

  CallManagerStatePigeonEnum state;

  UserPigeon? user;

  TerminatedReasonPigeon? terminatedReason;

  List<Object?> _toList() {
    return <Object?>[
      state,
      user,
      terminatedReason,
    ];
  }

  Object encode() {
    return _toList();  }

  static CallManagerStatePigeon decode(Object result) {
    result as List<Object?>;
    return CallManagerStatePigeon(
      state: result[0]! as CallManagerStatePigeonEnum,
      user: result[1] as UserPigeon?,
      terminatedReason: result[2] as TerminatedReasonPigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CallManagerStatePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is TerminatedReasonPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is CallManagerStatePigeonEnum) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PushConnectionState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is UserAvailabilityPigeonEnum) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is NetworkConfigurationMode) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is CallRolePigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is UserPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is TextMessagePigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is UserAvailabilityPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is PushManagerSettingsPigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is SettingsPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is CallManagerStatePigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TerminatedReasonPigeon.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CallManagerStatePigeonEnum.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PushConnectionState.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UserAvailabilityPigeonEnum.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NetworkConfigurationMode.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CallRolePigeon.values[value];
      case 135: 
        return UserPigeon.decode(readValue(buffer)!);
      case 136: 
        return TextMessagePigeon.decode(readValue(buffer)!);
      case 137: 
        return UserAvailabilityPigeon.decode(readValue(buffer)!);
      case 138: 
        return PushManagerSettingsPigeon.decode(readValue(buffer)!);
      case 139: 
        return SettingsPigeon.decode(readValue(buffer)!);
      case 140: 
        return CallManagerStatePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<Object> onChanged( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel onChangedChannel =
      EventChannel('dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityEventChannel.onChanged$instanceName', pigeonMethodCodec);
  return onChangedChannel.receiveBroadcastStream().map((dynamic event) {
    return event as Object;
  });
}
    

class CallManagerHostApi {
  /// Constructor for [CallManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CallManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setUser(UserPigeon user) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUser$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUserAvailability(UserAvailabilityPigeonEnum availability) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUserAvailability$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[availability]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class MessagingManagerHostApi {
  /// Constructor for [MessagingManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MessagingManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

}

class ControlChannelHostApi {
  /// Constructor for [ControlChannelHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ControlChannelHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

}

class UserManagerHostApi {
  /// Constructor for [UserManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UserManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

}

class SettingsManagerHostApi {
  /// Constructor for [SettingsManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SettingsManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

}

class LocalPushConnectivityHostApi {
  /// Constructor for [LocalPushConnectivityHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LocalPushConnectivityHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> disconnect() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.dispose$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
