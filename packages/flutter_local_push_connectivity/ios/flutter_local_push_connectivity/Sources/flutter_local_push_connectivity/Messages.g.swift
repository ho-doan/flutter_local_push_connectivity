// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum TerminatedReasonPigeon: Int {
  case hungUp = 0
  case callFailed = 1
  case unavailable = 2
}

enum CallManagerStatePigeonEnum: Int {
  case disconnected = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
}

enum PushConnectionState: Int {
  case configurationNeeded = 0
  case waitingForActivePushManager = 1
  case connecting = 2
  case connected = 3
  case waitingForUsers = 4
}

enum UserAvailabilityPigeonEnum: Int {
  case available = 0
  case unavailable = 1
}

enum NetworkConfigurationMode: Int {
  case wifi = 0
  case cellular = 1
  case ethernet = 2
  case both = 3
}

enum CallRolePigeon: Int {
  case sender = 0
  case receiver = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct UserPigeon: Hashable {
  var uuid: String
  var deviceName: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UserPigeon? {
    let uuid = pigeonVar_list[0] as! String
    let deviceName = pigeonVar_list[1] as! String

    return UserPigeon(
      uuid: uuid,
      deviceName: deviceName
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      deviceName,
    ]
  }
  static func == (lhs: UserPigeon, rhs: UserPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TextMessagePigeon: Hashable {
  var sender: UserPigeon
  var receiver: UserPigeon
  var message: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TextMessagePigeon? {
    let sender = pigeonVar_list[0] as! UserPigeon
    let receiver = pigeonVar_list[1] as! UserPigeon
    let message = pigeonVar_list[2] as! String

    return TextMessagePigeon(
      sender: sender,
      receiver: receiver,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      sender,
      receiver,
      message,
    ]
  }
  static func == (lhs: TextMessagePigeon, rhs: TextMessagePigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UserAvailabilityPigeon: Hashable {
  var availability: UserAvailabilityPigeonEnum
  var user: UserPigeon


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UserAvailabilityPigeon? {
    let availability = pigeonVar_list[0] as! UserAvailabilityPigeonEnum
    let user = pigeonVar_list[1] as! UserPigeon

    return UserAvailabilityPigeon(
      availability: availability,
      user: user
    )
  }
  func toList() -> [Any?] {
    return [
      availability,
      user,
    ]
  }
  static func == (lhs: UserAvailabilityPigeon, rhs: UserAvailabilityPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PushManagerSettingsPigeon: Hashable {
  var ssid: String
  var mobileCountryCode: String
  var mobileNetworkCode: String
  var trackingAreaCode: String
  var host: String
  var matchEthernet: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PushManagerSettingsPigeon? {
    let ssid = pigeonVar_list[0] as! String
    let mobileCountryCode = pigeonVar_list[1] as! String
    let mobileNetworkCode = pigeonVar_list[2] as! String
    let trackingAreaCode = pigeonVar_list[3] as! String
    let host = pigeonVar_list[4] as! String
    let matchEthernet = pigeonVar_list[5] as! Bool

    return PushManagerSettingsPigeon(
      ssid: ssid,
      mobileCountryCode: mobileCountryCode,
      mobileNetworkCode: mobileNetworkCode,
      trackingAreaCode: trackingAreaCode,
      host: host,
      matchEthernet: matchEthernet
    )
  }
  func toList() -> [Any?] {
    return [
      ssid,
      mobileCountryCode,
      mobileNetworkCode,
      trackingAreaCode,
      host,
      matchEthernet,
    ]
  }
  static func == (lhs: PushManagerSettingsPigeon, rhs: PushManagerSettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SettingsPigeon: Hashable {
  var uuid: String
  var deviceName: String
  var pushManagerSettings: PushManagerSettingsPigeon


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SettingsPigeon? {
    let uuid = pigeonVar_list[0] as! String
    let deviceName = pigeonVar_list[1] as! String
    let pushManagerSettings = pigeonVar_list[2] as! PushManagerSettingsPigeon

    return SettingsPigeon(
      uuid: uuid,
      deviceName: deviceName,
      pushManagerSettings: pushManagerSettings
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      deviceName,
      pushManagerSettings,
    ]
  }
  static func == (lhs: SettingsPigeon, rhs: SettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CallManagerStatePigeon: Hashable {
  var state: CallManagerStatePigeonEnum
  var user: UserPigeon? = nil
  var terminatedReason: TerminatedReasonPigeon? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CallManagerStatePigeon? {
    let state = pigeonVar_list[0] as! CallManagerStatePigeonEnum
    let user: UserPigeon? = nilOrValue(pigeonVar_list[1])
    let terminatedReason: TerminatedReasonPigeon? = nilOrValue(pigeonVar_list[2])

    return CallManagerStatePigeon(
      state: state,
      user: user,
      terminatedReason: terminatedReason
    )
  }
  func toList() -> [Any?] {
    return [
      state,
      user,
      terminatedReason,
    ]
  }
  static func == (lhs: CallManagerStatePigeon, rhs: CallManagerStatePigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return TerminatedReasonPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CallManagerStatePigeonEnum(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PushConnectionState(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return UserAvailabilityPigeonEnum(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NetworkConfigurationMode(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CallRolePigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      return UserPigeon.fromList(self.readValue() as! [Any?])
    case 136:
      return TextMessagePigeon.fromList(self.readValue() as! [Any?])
    case 137:
      return UserAvailabilityPigeon.fromList(self.readValue() as! [Any?])
    case 138:
      return PushManagerSettingsPigeon.fromList(self.readValue() as! [Any?])
    case 139:
      return SettingsPigeon.fromList(self.readValue() as! [Any?])
    case 140:
      return CallManagerStatePigeon.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? TerminatedReasonPigeon {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? CallManagerStatePigeonEnum {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PushConnectionState {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? UserAvailabilityPigeonEnum {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? NetworkConfigurationMode {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? CallRolePigeon {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? UserPigeon {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? TextMessagePigeon {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? UserAvailabilityPigeon {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? PushManagerSettingsPigeon {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? SettingsPigeon {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? CallManagerStatePigeon {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

var messagesPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: MessagesPigeonCodecReaderWriter());



private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class OnChangedStreamHandler: PigeonEventChannelWrapper<Any> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: OnChangedStreamHandler) {
    var channelName = "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityEventChannel.onChanged"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<Any>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: messagesPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CallManagerHostApi {
  func setUser(user: UserPigeon, completion: @escaping (Result<Void, Error>) -> Void)
  func setUserAvailability(availability: UserAvailabilityPigeonEnum, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CallManagerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `CallManagerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CallManagerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUser\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! UserPigeon
        api.setUser(user: userArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setUserChannel.setMessageHandler(nil)
    }
    let setUserAvailabilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUserAvailability\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserAvailabilityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let availabilityArg = args[0] as! UserAvailabilityPigeonEnum
        api.setUserAvailability(availability: availabilityArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setUserAvailabilityChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MessagingManagerHostApi {
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MessagingManagerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `MessagingManagerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MessagingManagerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ControlChannelHostApi {
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ControlChannelHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ControlChannelHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ControlChannelHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UserManagerHostApi {
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UserManagerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `UserManagerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UserManagerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SettingsManagerHostApi {
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SettingsManagerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `SettingsManagerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SettingsManagerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocalPushConnectivityHostApi {
  func disconnect(completion: @escaping (Result<Void, Error>) -> Void)
  func dispose(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocalPushConnectivityHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `LocalPushConnectivityHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocalPushConnectivityHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { _, reply in
        api.disconnect { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.dispose\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { _, reply in
        api.dispose { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
