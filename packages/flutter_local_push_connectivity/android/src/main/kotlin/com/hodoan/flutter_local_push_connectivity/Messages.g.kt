// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.hodoan.flutter_local_push_connectivity

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class TerminatedReasonPigeon(val raw: Int) {
  HUNG_UP(0),
  CALL_FAILED(1),
  UNAVAILABLE(2);

  companion object {
    fun ofRaw(raw: Int): TerminatedReasonPigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CallManagerStatePigeonEnum(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  DISCONNECTING(3);

  companion object {
    fun ofRaw(raw: Int): CallManagerStatePigeonEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PushConnectionState(val raw: Int) {
  CONFIGURATION_NEEDED(0),
  WAITING_FOR_ACTIVE_PUSH_MANAGER(1),
  CONNECTING(2),
  CONNECTED(3),
  WAITING_FOR_USERS(4);

  companion object {
    fun ofRaw(raw: Int): PushConnectionState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UserAvailabilityPigeonEnum(val raw: Int) {
  AVAILABLE(0),
  UNAVAILABLE(1);

  companion object {
    fun ofRaw(raw: Int): UserAvailabilityPigeonEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NetworkConfigurationMode(val raw: Int) {
  WIFI(0),
  CELLULAR(1),
  ETHERNET(2),
  BOTH(3);

  companion object {
    fun ofRaw(raw: Int): NetworkConfigurationMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CallRolePigeon(val raw: Int) {
  SENDER(0),
  RECEIVER(1);

  companion object {
    fun ofRaw(raw: Int): CallRolePigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UserPigeon (
  val uuid: String,
  val deviceName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UserPigeon {
      val uuid = pigeonVar_list[0] as String
      val deviceName = pigeonVar_list[1] as String
      return UserPigeon(uuid, deviceName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      uuid,
      deviceName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UserPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TextMessagePigeon (
  val sender: UserPigeon,
  val receiver: UserPigeon,
  val message: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TextMessagePigeon {
      val sender = pigeonVar_list[0] as UserPigeon
      val receiver = pigeonVar_list[1] as UserPigeon
      val message = pigeonVar_list[2] as String
      return TextMessagePigeon(sender, receiver, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      sender,
      receiver,
      message,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TextMessagePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UserAvailabilityPigeon (
  val availability: UserAvailabilityPigeonEnum,
  val user: UserPigeon
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UserAvailabilityPigeon {
      val availability = pigeonVar_list[0] as UserAvailabilityPigeonEnum
      val user = pigeonVar_list[1] as UserPigeon
      return UserAvailabilityPigeon(availability, user)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      availability,
      user,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UserAvailabilityPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PushManagerSettingsPigeon (
  val ssid: String,
  val mobileCountryCode: String,
  val mobileNetworkCode: String,
  val trackingAreaCode: String,
  val host: String,
  val matchEthernet: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PushManagerSettingsPigeon {
      val ssid = pigeonVar_list[0] as String
      val mobileCountryCode = pigeonVar_list[1] as String
      val mobileNetworkCode = pigeonVar_list[2] as String
      val trackingAreaCode = pigeonVar_list[3] as String
      val host = pigeonVar_list[4] as String
      val matchEthernet = pigeonVar_list[5] as Boolean
      return PushManagerSettingsPigeon(ssid, mobileCountryCode, mobileNetworkCode, trackingAreaCode, host, matchEthernet)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ssid,
      mobileCountryCode,
      mobileNetworkCode,
      trackingAreaCode,
      host,
      matchEthernet,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PushManagerSettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SettingsPigeon (
  val uuid: String,
  val deviceName: String,
  val pushManagerSettings: PushManagerSettingsPigeon
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SettingsPigeon {
      val uuid = pigeonVar_list[0] as String
      val deviceName = pigeonVar_list[1] as String
      val pushManagerSettings = pigeonVar_list[2] as PushManagerSettingsPigeon
      return SettingsPigeon(uuid, deviceName, pushManagerSettings)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      uuid,
      deviceName,
      pushManagerSettings,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is SettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CallManagerStatePigeon (
  val state: CallManagerStatePigeonEnum,
  val user: UserPigeon? = null,
  val terminatedReason: TerminatedReasonPigeon? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CallManagerStatePigeon {
      val state = pigeonVar_list[0] as CallManagerStatePigeonEnum
      val user = pigeonVar_list[1] as UserPigeon?
      val terminatedReason = pigeonVar_list[2] as TerminatedReasonPigeon?
      return CallManagerStatePigeon(state, user, terminatedReason)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      state,
      user,
      terminatedReason,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CallManagerStatePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TerminatedReasonPigeon.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CallManagerStatePigeonEnum.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PushConnectionState.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UserAvailabilityPigeonEnum.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NetworkConfigurationMode.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CallRolePigeon.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UserPigeon.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TextMessagePigeon.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UserAvailabilityPigeon.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PushManagerSettingsPigeon.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SettingsPigeon.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CallManagerStatePigeon.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is TerminatedReasonPigeon -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is CallManagerStatePigeonEnum -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PushConnectionState -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is UserAvailabilityPigeonEnum -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is NetworkConfigurationMode -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is CallRolePigeon -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is UserPigeon -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is TextMessagePigeon -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is UserAvailabilityPigeon -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PushManagerSettingsPigeon -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is SettingsPigeon -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is CallManagerStatePigeon -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val MessagesPigeonMethodCodec = StandardMethodCodec(MessagesPigeonCodec())



private class MessagesPigeonStreamHandler<T>(
    val wrapper: MessagesPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface MessagesPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class OnChangedStreamHandler : MessagesPigeonEventChannelWrapper<Any> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: OnChangedStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityEventChannel.onChanged"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<Any>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CallManagerHostApi {
  fun setUser(user: UserPigeon, callback: (Result<Unit>) -> Unit)
  fun setUserAvailability(availability: UserAvailabilityPigeonEnum, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CallManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `CallManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CallManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUser$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as UserPigeon
            api.setUser(userArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_local_push_connectivity.CallManagerHostApi.setUserAvailability$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val availabilityArg = args[0] as UserAvailabilityPigeonEnum
            api.setUserAvailability(availabilityArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MessagingManagerHostApi {

  companion object {
    /** The codec used by MessagingManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `MessagingManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: MessagingManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ControlChannelHostApi {

  companion object {
    /** The codec used by ControlChannelHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `ControlChannelHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ControlChannelHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UserManagerHostApi {

  companion object {
    /** The codec used by UserManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `UserManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: UserManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SettingsManagerHostApi {

  companion object {
    /** The codec used by SettingsManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `SettingsManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: SettingsManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LocalPushConnectivityHostApi {
  fun disconnect(callback: (Result<Unit>) -> Unit)
  fun dispose(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by LocalPushConnectivityHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `LocalPushConnectivityHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: LocalPushConnectivityHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.disconnect$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.disconnect{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_local_push_connectivity.LocalPushConnectivityHostApi.dispose$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.dispose{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
